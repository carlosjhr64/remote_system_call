#!/usr/bin/env ruby
# Requires:
#`ruby`
#`zenity`
#`bash`

# Standard Libraries
require 'drb/drb'
require 'json'
require 'shellwords'
require 'tempfile'
require 'socket'
require 'securerandom'

# Gems
require 'user_space'
require 'help_parser'

# This Gem
require 'remote_system_call' 
include REMOTE_SYSTEM_CALL

USERSPACE = USER_SPACE::UserSpace.new
USERSPACE.install unless USERSPACE.version == VERSION
USERSPACE.config.each{|lopt, value| CONFIG[lopt.to_sym] = value}
# Pad up missing values:
unless CONFIG[:ip_address]
  if ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
    CONFIG[:ip_address] = ip.ip_address
  else
    CONFIG[:ip_address] = ''
  end
end
unless CONFIG[:port]
  CONFIG[:port] = 0
end

NAME = File.basename($0) # remote_system_call
HELP = <<HELP
Usage: #{NAME} [options] [command]
Options:
  -d --daemon     Run the server.
  -p --password   Enter a password.

  --ip-address=IP Defaults to '#{CONFIG[:ip_address]}'
  --port=PORT     Defaults to '#{CONFIG[:port]}'

  -t --tty        Use terminal(instead of zenity).

  --re-salt       Generates a new random salt.
  --dump-salt     Dump secret salt and exit.
  --load-salt     Enter a new salt via STDIN and exit.
Hard coded commands:
  exit            Ask the server to quit.
  commands        List the remote system calls.
Local system calls:
#{CONFIG[:commands].map{|x|"  #{x[0].ljust(16)}#{x[1]}"}.join("\n")}
You can add sytem calls by editing the configuration:
  ~/.config/#{NAME}/config.json
Version: #{VERSION}
HELP
# REMOTE_SYSTEM_CALL's VERSION

def message(msg, type=:info)
  msg = JSON.pretty_generate msg unless String===msg
  if OPTIONS[:tty]
    case type
    when :info
      puts msg
    when :error
      STDERR.puts msg
    end
  else
    if msg=~/\n/
      tf = Tempfile.new('msg')
      tf.puts msg
      tf.close
      # Has to be type text
      cmd = CONFIG[:text].gsub(/\$1/, tf.path)
      system(cmd)
    else
      cmd = CONFIG[type].gsub(/\$1/, Shellwords.escape(msg))
      system(cmd)
    end
  end
end

def password
  if pwd = OPTIONS[:password]
    # If user specified pwd in the command line, use it.
    # Else, use the :pwd system call to get the pwd.
    if pwd==true
      if OPTIONS[:tty]
        print 'Password: '
        pwd = STDIN.gets.strip
      else
        pwd = `#{CONFIG[:pwd]}`.strip
      end
    end
  else
    pwd = ''
  end
  pwd
end

def execute(*args)
  nonce  = Time.now.to_i
  digest = RemoteSystemCall.digest(nonce, SALTED)
  RSC.execute(nonce, digest, *args)
end

def argv
  commands = execute('commands')

  unless command = ARGV.shift
    if OPTIONS[:tty]
      print 'Command: '
      STDIN.gets.strip.split(/\s+/).each{|arg| ARGV.push(arg)}
      command = ARGV.shift
    else
      # Get the remote commands
      keys = commands.keys.sort.join(' ')
      cmd = CONFIG[:list]
      cmd = cmd.gsub(/\$1/, keys)
      command = `#{cmd}`.strip
    end
  end

  if command and command.length > 0
    match = /^.*\$(\d)/.match(commands[command])
    arity = (match)? match[1].to_i : 0
    if ARGV.empty? and arity > 0
      if OPTIONS[:tty]
        print 'Arguments: '
        STDIN.gets.strip.split(/\s+/).each{|arg| ARGV.push(arg)}
      else
        cmd = CONFIG[:entry]
        `#{cmd}`.strip.split(/\s+/).each{|arg| ARGV.push(arg)}
      end
    end
    raise "args(#{ARGV.length})!=arity(#{arity})" unless ARGV.length == arity
    ARGV.unshift(command)
    return true
  else
    return false
  end

  raise "Unexpected program flow"
end

CONNECTFILE = File.join(USERSPACE.cachedir, 'connect')
begin
  OPTIONS = HELP_PARSER::HelpParser.new(VERSION, HELP)

  # Create salt file if missing or re-salting.
  SALTFILE = File.join(USERSPACE.cachedir, 'salt')
  if OPTIONS[:re_salt] or !File.exist?(SALTFILE)
    File.open(SALTFILE, 'w', 0600){|fh| fh.puts SecureRandom.base64(33)}
  end
  if OPTIONS[:dump_salt]
    puts File.read(SALTFILE).strip
    exit
  end
  if OPTIONS[:load_salt]
    print 'Salt: '
    salt = STDIN.gets.strip
    File.open(SALTFILE, 'w', 0600){|fh| fh.puts salt}
    exit
  end
  SALTED = RemoteSystemCall.digest(File.read(SALTFILE).strip, password)

  IP     = OPTIONS[:ip_address, CONFIG[:ip_address]]
  PORT   = OPTIONS[:port,       CONFIG[:port]]
  URI    = "druby://#{IP}:#{PORT}"

  if OPTIONS[:daemon]
    begin
      # we're the server
      rsc = RemoteSystemCall.new(SALTED)
      DRb.start_service(URI, rsc)
      File.open(CONNECTFILE, 'w', 0600){|fh| fh.puts DRb.uri}
      if cmd = CONFIG[:scp]
        cmd = cmd.sub(/\$1/, CONNECTFILE)
        cmd = cmd.sub(/\$2/, SALTFILE)
        system(cmd) or STDERR.puts 'Warning: SCP failed.'
      end
      puts DRb.uri
      Thread.new do
        while not rsc.exit?
          sleep 2
        end
        sleep 1
        DRb.thread.kill
      end
      DRb.thread.join()
    ensure
      File.unlink(CONNECTFILE) if File.exist?(CONNECTFILE)
    end
  else
    uri = (File.exist?(CONNECTFILE))? File.read(CONNECTFILE).strip : URI
    RSC = DRbObject.new_with_uri(uri)
    STDERR.puts uri
    begin
      OPTIONS.usage_error 'Need command.' unless argv
      msg = execute(*ARGV)
      message(msg)
    rescue ValidationError
      msg = $!.message
      message(msg, :error)
      exit 77 # Permision Error
    end
  end

rescue HELP_PARSER::UsageException
  puts $!.message
rescue HELP_PARSER::UsageError
  STDERR.puts $!.message
  exit 64 # Usage Error
rescue DRb::DRbConnError
  message('Connection Error', :error)
rescue RuntimeError
  message($!.message, :error)
end
